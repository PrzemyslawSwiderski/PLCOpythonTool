import pandas
from sklearn.neural_network import MLPRegressor

config = {
    "test_input_data": pandas.DataFrame(data={
        "age": [56.0],
        "dx_psa": [4.70],
        "pros_gleason": [6.0],
        "weight_f": [210.0],
        "height_f": [69.0],
        "pack_years": [41.0],
        "numbiopp": [1.0],
        "curative_hormp": [0.0],
        "curative_othp": [1.0],
        "curative_prostp": [0.0],
        "curative_radp": [0.0],
        "fh_cancer": [0.0],
        "pros_fh_cnt": [0.0],
        "brothers": [0.0],
        "sisters": [0.0],
        "diabetes_f": [0.0],
        "gallblad_f": [0.0],
        "hearta_f": [0.0],
        "hyperten_f": [0.0],
        "liver_comorbidity": [0.0],
        "osteopor_f": [0.0],
        "polyps_f": [0.0],
        "stroke_f": [0.0],
        "enlpros_f": [0.0],
        "infpros_f": [0.0],
        "prosprob_f": [0.0],
        "surg_biopsy": [0.0],
        "vasect_f": [0.0],
        "vasecta": [0.0],
        "dth_days": [7670.086179]  # THE LAST PARAMETER IS AIMED TO BE PREDICTED
    }),
    "neural_net_def": MLPRegressor(activation='relu',
                                   solver='adam',
                                   hidden_layer_sizes=(15, 15),
                                   shuffle=True,
                                   random_state=9,
                                   tol=1e-4,
                                   learning_rate='adaptive',
                                   momentum=0.9,
                                   epsilon=1e-8,
                                   beta_1=0.9,
                                   beta_2=0.999,
                                   max_iter=1000,
                                   alpha=0.0001),
    "neural_net_def_bak": MLPRegressor(activation='identity',
                                       solver='adam',
                                       hidden_layer_sizes=(15, 15),
                                       verbose=False,
                                       random_state=9,
                                       learning_rate='adaptive',
                                       momentum=0.09,
                                       max_iter=200,
                                       alpha=0.001),
    "saved_net_name": "saved_mortality_net.pkl"
}
